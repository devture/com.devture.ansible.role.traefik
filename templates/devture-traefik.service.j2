[Unit]
Description=Traefik ({{ devture_traefik_identifier }})
{% for service in devture_traefik_systemd_required_services_list %}
Requires={{ service }}
After={{ service }}
{% endfor %}
DefaultDependencies=no

[Service]
Type=simple
Environment="HOME={{ devture_systemd_docker_base_systemd_unit_home_path }}"
ExecStartPre=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} stop --time={{ devture_systemd_docker_base_container_stop_grace_time_seconds }} {{ devture_traefik_identifier }} 2>/dev/null || true'
ExecStartPre=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} rm {{ devture_traefik_identifier }} 2>/dev/null || true'

{#
If a UNIX socket is used, we need to run as root and not drop capabilities, because:
- we won't be able to access the socket (owned by root:docker on most distros)
- we won't be able to access the /config files (unless we add another capability that lets root access other users' files)

If a non-UNIX-socket endpoint is used, we can drop all capabilities and just run with the uid/gid, because:
- reading through the remote (TCP) endpoint does not require special privileges
- the configuration files are owned by the same uid/gid, so reading them works
#}
ExecStartPre={{ devture_systemd_docker_base_host_command_docker }} create \
			--rm \
			--name={{ devture_traefik_identifier }} \
			--log-driver=none \
			{% if not devture_traefik_config_providers_docker_endpoint_is_unix_socket %}
			--user={{ devture_traefik_uid }}:{{ devture_traefik_gid }} \
			--cap-drop=ALL \
			{% endif %}
			--read-only \
			--network={{ devture_traefik_container_network }} \
			{% if devture_traefik_container_web_host_bind_port %}
			-p {{ devture_traefik_container_web_host_bind_port }}:{{ devture_traefik_config_entrypoint_web_port_in_container }} \
			{% endif %}
			{% if devture_traefik_container_web_secure_host_bind_port %}
			-p {{ devture_traefik_container_web_secure_host_bind_port }}:{{ devture_traefik_config_entrypoint_web_secure_port_in_container }} \
			{% endif %}
			{% if devture_traefik_container_web_secure_host_bind_port_udp %}
			-p {{ devture_traefik_container_web_secure_host_bind_port_udp }}:{{ devture_traefik_config_entrypoint_web_secure_port_in_container }}/udp \
			{% endif %}
			{% if devture_traefik_container_metrics_host_bind_port %}
			-p {{ devture_traefik_container_metrics_host_bind_port }}:{{ devture_traefik_config_entrypoint_metrics_port_in_container }} \
			{% endif %}
			{% for additional_entrypoint in devture_traefik_additional_entrypoints %}
			{% if additional_entrypoint.host_bind_port %}
			-p {{ additional_entrypoint.host_bind_port }}:{{ additional_entrypoint.port }} \
			{% if additional_entrypoint.host_bind_port_udp | default('') %}
			-p {{ additional_entrypoint.host_bind_port_udp }}:{{ additional_entrypoint.port }}/udp \
			{% endif %}
			{% endif %}
			{% endfor %}
			--env-file={{ devture_traefik_config_dir_path }}/env \
			--label-file={{ devture_traefik_config_dir_path }}/labels \
			--mount type=bind,src={{ devture_traefik_config_dir_path }},dst=/config,ro \
			{% if devture_traefik_ssl_dir_enabled %}
			--mount type=bind,src={{ devture_traefik_ssl_dir_path }},dst=/ssl \
			{% endif %}
			{% if devture_traefik_config_providers_docker_endpoint_is_unix_socket %}
			--mount type=bind,src={{ devture_traefik_config_providers_docker_endpoint | replace('unix://', '') }},dst=/var/run/docker.sock,ro \
			{% endif %}
			{% if devture_traefik_plugin_support_enabled %}
			--mount type=bind,src={{ devture_traefik_plugins_dir_path }},dst=/plugins-storage \
			{% endif %}
			{% if devture_traefik_container_extra_arguments | length > 0 %}
			{{ devture_traefik_container_extra_arguments | join(" ") }} \
			{% endif %}
			{{ devture_traefik_container_image }} \
			--configFile=/config/traefik.yml {{ devture_traefik_process_extra_arguments | join(' ') }}

{% for network in devture_traefik_container_additional_networks %}
ExecStartPre={{ devture_systemd_docker_base_host_command_docker }} network connect {{ network }} {{ devture_traefik_identifier }}
{% endfor %}

ExecStart={{ devture_systemd_docker_base_host_command_docker }} start --attach {{ devture_traefik_identifier }}

ExecStop=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} stop --time={{ devture_systemd_docker_base_container_stop_grace_time_seconds }} {{ devture_traefik_identifier }} 2>/dev/null || true'
ExecStop=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} rm {{ devture_traefik_identifier }} 2>/dev/null || true'
Restart=always
RestartSec=30
SyslogIdentifier={{ devture_traefik_identifier }}

[Install]
WantedBy=multi-user.target
